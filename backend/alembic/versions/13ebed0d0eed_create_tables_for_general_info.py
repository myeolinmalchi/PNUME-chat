"""create tables for general info

Revision ID: 13ebed0d0eed
Revises: 413b6db18ad9
Create Date: 2025-01-29 16:40:32.721445

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector

# revision identifiers, used by Alembic.
revision: str = '13ebed0d0eed'
down_revision: Union[str, None] = '413b6db18ad9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'semesters',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('year', sa.Integer(), nullable=False),
        sa.Column(
            'type',
            sa.Enum(
                '1학기',
                '2학기',
                '여름 계절학기',
                '겨울 계절학기',
                '미분류',
                name='semestertypeenum'
            ),
            nullable=False
        ), sa.Column('st_date', sa.Date(), nullable=False),
        sa.Column('ed_date', sa.Date(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'supports',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('category', sa.String(), nullable=False),
        sa.Column('sub_category', sa.String(), nullable=False),
        sa.Column('title', sa.String(), nullable=True),
        sa.Column('url', sa.String(), nullable=False),
        sa.Column('content', sa.String(), nullable=False),
        sa.Column(
            'title_vector',
            pgvector.sqlalchemy.vector.VECTOR(dim=1024),
            nullable=True
        ),
        sa.Column(
            'title_sparse_vector',
            pgvector.sqlalchemy.sparsevec.SPARSEVEC(dim=250002),
            nullable=True
        ), sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'calendars',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('st_date', sa.Date(), nullable=False),
        sa.Column('ed_date', sa.Date(), nullable=False),
        sa.Column('type', sa.String(), nullable=True),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('detail', sa.String(), nullable=True),
        sa.Column('semester_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['semester_id'],
            ['semesters.id'],
        ), sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'support_attachments',
        sa.Column(
            'attachment_id', sa.Integer(), autoincrement=True, nullable=False
        ), sa.Column('support_id', sa.Integer(), nullable=True),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('url', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['support_id'], ['supports.id'],
                                ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('attachment_id')
    )
    op.create_table(
        'support_content_chunks',
        sa.Column('chunk_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('support_id', sa.Integer(), nullable=True),
        sa.Column('chunk_content', sa.String(), nullable=False),
        sa.Column(
            'chunk_vector',
            pgvector.sqlalchemy.vector.VECTOR(dim=1024),
            nullable=True
        ),
        sa.Column(
            'chunk_sparse_vector',
            pgvector.sqlalchemy.sparsevec.SPARSEVEC(dim=250002),
            nullable=True
        ),
        sa.ForeignKeyConstraint(['support_id'], ['supports.id'],
                                ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('chunk_id')
    )
    op.create_table(
        'buildings',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('building_num', sa.Integer(), nullable=False),
        sa.Column('longitude', sa.Float(), nullable=False),
        sa.Column('latitude', sa.Float(), nullable=False),
        sa.Column('university_id', sa.Integer(), nullable=True),
        sa.Column('department_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['department_id'],
            ['departments.id'],
        ), sa.ForeignKeyConstraint(
            ['university_id'],
            ['universities.id'],
        ), sa.PrimaryKeyConstraint('id'), sa.UniqueConstraint('building_num'),
        sa.UniqueConstraint('name')
    )
    op.create_table(
        'subjects',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('department_id', sa.Integer(), nullable=True),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column(
            'level', sa.Enum('대학', '대학원', name='levelenum'), nullable=True
        ),
        sa.Column(
            'type',
            sa.Enum(
                '교양 필수',
                '교양 선택',
                '전공 필수',
                '전공 선택',
                '전공 기초',
                '교직 과목',
                name='subjecttypeenum'
            ),
            nullable=False
        ),
        sa.Column(
            'grade',
            sa.Enum('1', '2', '3', '4', name='gradeenum'),
            nullable=True
        ), sa.Column('code', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ['department_id'],
            ['departments.id'],
        ), sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'courses',
        sa.Column(
            'course_id', sa.Integer(), autoincrement=True, nullable=False
        ), sa.Column('subject_id', sa.Integer(), nullable=True),
        sa.Column('professor_id', sa.Integer(), nullable=True),
        sa.Column('semester_id', sa.Integer(), nullable=True),
        sa.Column('group', sa.Integer(), nullable=False),
        sa.Column('is_online', sa.String(), nullable=True),
        sa.Column('is_english', sa.Boolean(), nullable=True),
        sa.Column('credit', sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ['professor_id'],
            ['professors.id'],
        ), sa.ForeignKeyConstraint(
            ['semester_id'],
            ['semesters.id'],
        ), sa.ForeignKeyConstraint(
            ['subject_id'],
            ['subjects.id'],
        ), sa.PrimaryKeyConstraint('course_id')
    )
    op.create_table(
        'timetables',
        sa.Column(
            'timetable_id', sa.Integer(), autoincrement=True, nullable=False
        ), sa.Column('course_id', sa.Integer(), nullable=True),
        sa.Column('day_of_week', sa.String(), nullable=False),
        sa.Column('building_id', sa.Integer(), nullable=True),
        sa.Column('classroom', sa.String(), nullable=False),
        sa.Column('st_time', sa.Time(), nullable=True),
        sa.Column('ed_time', sa.Time(), nullable=True),
        sa.Column('is_remote', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ['building_id'],
            ['buildings.id'],
        ), sa.ForeignKeyConstraint(
            ['course_id'],
            ['courses.course_id'],
        ), sa.PrimaryKeyConstraint('timetable_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('timetables')
    op.drop_table('courses')
    op.drop_table('subjects')
    op.drop_table('buildings')
    op.drop_table('support_content_chunks')
    op.drop_table('support_attachments')
    op.drop_table('calendars')
    op.drop_table('supports')
    op.drop_table('semesters')
    # ### end Alembic commands ###
